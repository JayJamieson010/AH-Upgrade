# Import necessary libraries
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
    QStackedWidget, QFrame
)
import my_APC  # Import the test function
# Initialization of the main application
def initialize_app():
    app = QApplication([])
    app.setStyleSheet(global_stylesheet())
    return app

# Stylesheet definitions
def global_stylesheet():
    return """
        QPushButton {
            padding: 10px;
            font-size: 16px;
        }
        QPushButton#sidebarButton {
            background-color: red;
            color: white;
            border: none;
            text-align: left;
            padding: 10px 20px;
        }
        QPushButton#sidebarButton:hover {
            background-color: darkred;
        }
        QLabel {
            font-size: 24px;
            margin: 20px;
        }
        QWidget#contentArea {
            background-color: white;
        }
    """

# Sidebar navigation
class SidebarNavigation(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        # Main layout for the sidebar
        self.setFixedWidth(250)
        self.setStyleSheet("background-color: lightgray;")
        layout = QVBoxLayout()
        
        # Add buttons for navigation
        self.home_button = QPushButton("üè† Home", self)
        self.home_button.setObjectName("sidebarButton")
        layout.addWidget(self.home_button)

        self.xero_button = QPushButton("üìÑ Xero Automation", self)
        self.xero_button.setObjectName("sidebarButton")
        layout.addWidget(self.xero_button)

        self.office_button = QPushButton("üíº Office Automation", self)
        self.office_button.setObjectName("sidebarButton")
        layout.addWidget(self.office_button)

        self.apc_button = QPushButton("üì¶ APC Package Tools", self)
        self.apc_button.setObjectName("sidebarButton")
        layout.addWidget(self.apc_button)

        self.settings_button = QPushButton("‚öôÔ∏è Settings", self)
        self.settings_button.setObjectName("sidebarButton")
        layout.addWidget(self.settings_button)

        # Stretch to align items to the top
        layout.addStretch()
        self.setLayout(layout)

# Main window with sidebar and content
class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Automation Haven V1.0.0")
        self.init_ui()

    def init_ui(self):
        # Main layout
        main_layout = QHBoxLayout(self)
        
        # Sidebar toggle button
        self.sidebar = SidebarNavigation(self)
        self.sidebar_visible = True
        
        # Sidebar toggle button
        self.toggle_button = QPushButton("‚ò∞", self)
        self.toggle_button.setFixedSize(QSize(50, 50))
        self.toggle_button.clicked.connect(self.toggle_sidebar)
        self.toggle_button.setStyleSheet("background-color: red; color: white; font-size: 18px; border: none;")

        # Content area
        self.content_area = QStackedWidget(self)
        self.content_area.setObjectName("contentArea")
        self.content_area.addWidget(self.create_home_page())
        self.content_area.addWidget(self.create_xero_page())
        self.content_area.addWidget(self.create_office_page())
        self.content_area.addWidget(self.create_apc_page())
        self.content_area.addWidget(self.create_settings_page())

        # Connect sidebar buttons to pages
        self.sidebar.home_button.clicked.connect(lambda: self.content_area.setCurrentIndex(0))
        self.sidebar.xero_button.clicked.connect(lambda: self.content_area.setCurrentIndex(1))
        self.sidebar.office_button.clicked.connect(lambda: self.content_area.setCurrentIndex(2))
        self.sidebar.apc_button.clicked.connect(lambda: self.content_area.setCurrentIndex(3))
        self.sidebar.settings_button.clicked.connect(lambda: self.content_area.setCurrentIndex(4))

        # Layout setup
        main_layout.addWidget(self.sidebar)
        main_layout.addWidget(self.toggle_button)
        main_layout.addWidget(self.content_area)

    def toggle_sidebar(self):
        if self.sidebar_visible:
            self.sidebar.hide()
        else:
            self.sidebar.show()
        self.sidebar_visible = not self.sidebar_visible

    # Create pages
    def create_home_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("Welcome to Automation Haven!")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        page.setLayout(layout)
        return page

    def create_xero_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        
        # Add a label for the page title
        label = QLabel("Xero Automation")
        label.setAlignment(Qt.AlignCenter)  # Center align the label
        
        # Create the button
        xero_sender = QPushButton("Xero Statement Sender")
        xero_sender.setFixedSize(200, 50)  # Optional: Set a fixed size for the button
        
        # Add widgets to the layout
        layout.addWidget(label)
        layout.addWidget(xero_sender, alignment=Qt.AlignCenter)  # Center the button in the layout
        
        # Set the layout for the page
        page.setLayout(layout)
        return page


    def create_office_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("Office Automation Tools")
        
        # Create the button
        doc_Automation = QPushButton("Doc Automaions")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        layout.addWidget(doc_Automation, alignment= Qt.AlignCenter)
        page.setLayout(layout)
        return page

    def create_apc_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("APC Package Tools")
        apc_Automation = QPushButton("APC Automations")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        apc_Automation.addWidget(apc_Automation)
        #Add Funtion 
        apc_Automation.clicked.connect()
        page.setLayout(layout)
        return page

    def create_settings_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("Settings")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        page.setLayout(layout)
        return page

# Main execution
if __name__ == "__main__":
    app = initialize_app()
    window = MainWindow()
    window.showMaximized()
    app.exec_()

 PATH = r"C:\webdrivers\chromedriver-win64\chromedriver.exe"
 ###############################################
 
 "C:\Users\jayja\OneDrive\Documents\RPA Achievements\Certificates\certificate.pfx"

 xero old chromedriver
import json
from PyQt5.QtWidgets import QWidget, QLabel, QVBoxLayout, QLineEdit, QPushButton, QFileDialog, QMessageBox
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from openpyxl import load_workbook
import pyautogui
import time
import os

# Global variables for user inputs
PATH = ""
email = ""
password = ""
testing = False

# Testing mode inclusion
CONFIG_FILE = os.path.join("Main", "Xero.json")  # Universal path to the JSON file

def load_config():
    """Load configuration from a JSON file."""
    global PATH, email, password
    try:
        with open(CONFIG_FILE, "r") as file:
            config = json.load(file)
            PATH = config.get("path", "")
            email = config.get("email", "")
            password = config.get("password", "")
    except FileNotFoundError:
        print("Configuration file not found. Using default values.")
    except json.JSONDecodeError:
        print("Error reading the configuration file.")

def save_config():
    """Save configuration to a JSON file, creating the file if it doesn't exist."""
    config = {
        "path": PATH,
        "email": email,
        "password": password
    }
    try:
        # Ensure the directory structure exists
        os.makedirs(os.path.dirname(CONFIG_FILE), exist_ok=True)

        with open(CONFIG_FILE, "w") as file:
            json.dump(config, file, indent=4)
    except Exception as e:
        print(f"Error saving configuration: {e}")

def xero_setup():
    """
    Function to create a small window for setting the PATH, email, and password variables.
    """
    setup_window = QWidget()
    setup_window.setWindowTitle("Xero Setup")
    setup_window.setMinimumSize(400, 300)

    # Apply Xero-inspired styles
    xero_blue = "#0074D9"
    setup_window.setStyleSheet(f"""
        QWidget {{
            background-color: #F4F4F9;
        }}
        QLabel {{
            font-size: 14px;
            color: #333333;
        }}
        QLineEdit {{
            border: 1px solid {xero_blue};
            border-radius: 5px;
            padding: 5px;
            font-size: 14px;
        }}
        QPushButton {{
            background-color: {xero_blue};
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px;
            font-size: 14px;
        }}
        QPushButton:hover {{
            background-color: #0057A4;
        }}
        QPushButton:pressed {{
            background-color: #003E73;
        }}
    """)

    layout = QVBoxLayout()

    # Input fields
    path_label = QLabel("Chromedriver PATH:")
    path_input = QLineEdit()
    path_input.setPlaceholderText("Enter the path to chromedriver.exe")
    path_input.setText(PATH)

    email_label = QLabel("Email:")
    email_input = QLineEdit()
    email_input.setPlaceholderText("Enter your Xero email")
    email_input.setText(email)

    password_label = QLabel("Password:")
    password_input = QLineEdit()
    password_input.setPlaceholderText("Enter your Xero password")
    password_input.setEchoMode(QLineEdit.Password)
    password_input.setText(password)

    # Function to save inputs
    def save_inputs():
        global PATH, email, password
        PATH = path_input.text().strip()
        email = email_input.text().strip()
        password = password_input.text().strip()

        if not PATH or not email or not password:
            QMessageBox.warning(setup_window, "Warning", "All fields are required!")
        else:
            save_config()  # Save configuration to JSON file
            QMessageBox.information(setup_window, "Success", "Setup completed!")
            setup_window.close()

    # Save button
    save_button = QPushButton("Save")
    save_button.clicked.connect(save_inputs)

    # Add widgets to the layout
    layout.addWidget(path_label)
    layout.addWidget(path_input)
    layout.addWidget(email_label)
    layout.addWidget(email_input)
    layout.addWidget(password_label)
    layout.addWidget(password_input)
    layout.addWidget(save_button)

    setup_window.setLayout(layout)
    setup_window.show()

# Global variable to keep the window reference
xero_window = None

def create_window():
    """Function to create and display the Xero Automation window."""
    global xero_window  # Use a global variable to hold the window reference

    # Create a new widget as a window
    xero_window = QWidget()
    xero_window.setWindowTitle("Xero Automation Window")
    xero_window.setMinimumSize(400, 300)

    # Variables to hold selected file path
    selected_file_path = None

    # Function to browse and select an Excel file
    def browse_file():
        nonlocal selected_file_path
        options = QFileDialog.Options()
        file_name, _ = QFileDialog.getOpenFileName(
            xero_window, "Select Excel File", "", "Excel Files (*.xlsx);;All Files (*)", options=options
        )
        if file_name:
            excel_path_label.setText(f"Selected File: {file_name}")
            selected_file_path = file_name
        else:
            excel_path_label.setText("No file selected.")
            selected_file_path = None

    # Xero Automation function
    def xero_statement_sender():
        global email, password, PATH

        load_config()  # This will load the config and set the global variables

        # Check if email and password have been loaded correctly
        if email and password:
            print(f"Email: {email}, Password: {password}")
        else:
            print("Did not load configuration properly.")

        if not selected_file_path:
            QMessageBox.warning(xero_window, "Warning", "Please select an Excel file.")
            return

        try:
            service = Service(PATH)
            driver = webdriver.Chrome(service=service)

            wb = load_workbook(selected_file_path)
            ws = wb.active
            student_list = list(ws.iter_rows(min_row=2, min_col=1, max_col=1, values_only=True))

            # Example task logic for interacting with the browser
            driver.maximize_window()
            driver.get("https://login.xero.com/")

            # Placeholder for additional automation tasks

        except Exception as e:
            QMessageBox.critical(xero_window, "Error", f"An error occurred: {e}")

    # UI elements for the window
    excel_path_label = QLabel("No file selected.")
    browse_button = QPushButton("Browse")
    browse_button.clicked.connect(browse_file)

    send_button = QPushButton("Send Statements")
    send_button.clicked.connect(xero_statement_sender)

    # Layout for the window
    layout = QVBoxLayout()
    layout.addWidget(excel_path_label)
    layout.addWidget(browse_button)
    layout.addWidget(send_button)

    xero_window.setLayout(layout)
    xero_window.show()
