# Import necessary libraries
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
    QStackedWidget, QFrame
)
import my_APC  # Import the test function
# Initialization of the main application
def initialize_app():
    app = QApplication([])
    app.setStyleSheet(global_stylesheet())
    return app

# Stylesheet definitions
def global_stylesheet():
    return """
        QPushButton {
            padding: 10px;
            font-size: 16px;
        }
        QPushButton#sidebarButton {
            background-color: red;
            color: white;
            border: none;
            text-align: left;
            padding: 10px 20px;
        }
        QPushButton#sidebarButton:hover {
            background-color: darkred;
        }
        QLabel {
            font-size: 24px;
            margin: 20px;
        }
        QWidget#contentArea {
            background-color: white;
        }
    """

# Sidebar navigation
class SidebarNavigation(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.init_ui()

    def init_ui(self):
        # Main layout for the sidebar
        self.setFixedWidth(250)
        self.setStyleSheet("background-color: lightgray;")
        layout = QVBoxLayout()
        
        # Add buttons for navigation
        self.home_button = QPushButton("üè† Home", self)
        self.home_button.setObjectName("sidebarButton")
        layout.addWidget(self.home_button)

        self.xero_button = QPushButton("üìÑ Xero Automation", self)
        self.xero_button.setObjectName("sidebarButton")
        layout.addWidget(self.xero_button)

        self.office_button = QPushButton("üíº Office Automation", self)
        self.office_button.setObjectName("sidebarButton")
        layout.addWidget(self.office_button)

        self.apc_button = QPushButton("üì¶ APC Package Tools", self)
        self.apc_button.setObjectName("sidebarButton")
        layout.addWidget(self.apc_button)

        self.settings_button = QPushButton("‚öôÔ∏è Settings", self)
        self.settings_button.setObjectName("sidebarButton")
        layout.addWidget(self.settings_button)

        # Stretch to align items to the top
        layout.addStretch()
        self.setLayout(layout)

# Main window with sidebar and content
class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Automation Haven V1.0.0")
        self.init_ui()

    def init_ui(self):
        # Main layout
        main_layout = QHBoxLayout(self)
        
        # Sidebar toggle button
        self.sidebar = SidebarNavigation(self)
        self.sidebar_visible = True
        
        # Sidebar toggle button
        self.toggle_button = QPushButton("‚ò∞", self)
        self.toggle_button.setFixedSize(QSize(50, 50))
        self.toggle_button.clicked.connect(self.toggle_sidebar)
        self.toggle_button.setStyleSheet("background-color: red; color: white; font-size: 18px; border: none;")

        # Content area
        self.content_area = QStackedWidget(self)
        self.content_area.setObjectName("contentArea")
        self.content_area.addWidget(self.create_home_page())
        self.content_area.addWidget(self.create_xero_page())
        self.content_area.addWidget(self.create_office_page())
        self.content_area.addWidget(self.create_apc_page())
        self.content_area.addWidget(self.create_settings_page())

        # Connect sidebar buttons to pages
        self.sidebar.home_button.clicked.connect(lambda: self.content_area.setCurrentIndex(0))
        self.sidebar.xero_button.clicked.connect(lambda: self.content_area.setCurrentIndex(1))
        self.sidebar.office_button.clicked.connect(lambda: self.content_area.setCurrentIndex(2))
        self.sidebar.apc_button.clicked.connect(lambda: self.content_area.setCurrentIndex(3))
        self.sidebar.settings_button.clicked.connect(lambda: self.content_area.setCurrentIndex(4))

        # Layout setup
        main_layout.addWidget(self.sidebar)
        main_layout.addWidget(self.toggle_button)
        main_layout.addWidget(self.content_area)

    def toggle_sidebar(self):
        if self.sidebar_visible:
            self.sidebar.hide()
        else:
            self.sidebar.show()
        self.sidebar_visible = not self.sidebar_visible

    # Create pages
    def create_home_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("Welcome to Automation Haven!")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        page.setLayout(layout)
        return page

    def create_xero_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        
        # Add a label for the page title
        label = QLabel("Xero Automation")
        label.setAlignment(Qt.AlignCenter)  # Center align the label
        
        # Create the button
        xero_sender = QPushButton("Xero Statement Sender")
        xero_sender.setFixedSize(200, 50)  # Optional: Set a fixed size for the button
        
        # Add widgets to the layout
        layout.addWidget(label)
        layout.addWidget(xero_sender, alignment=Qt.AlignCenter)  # Center the button in the layout
        
        # Set the layout for the page
        page.setLayout(layout)
        return page


    def create_office_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("Office Automation Tools")
        
        # Create the button
        doc_Automation = QPushButton("Doc Automaions")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        layout.addWidget(doc_Automation, alignment= Qt.AlignCenter)
        page.setLayout(layout)
        return page

    def create_apc_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("APC Package Tools")
        apc_Automation = QPushButton("APC Automations")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        apc_Automation.addWidget(apc_Automation)
        #Add Funtion 
        apc_Automation.clicked.connect()
        page.setLayout(layout)
        return page

    def create_settings_page(self):
        page = QWidget()
        layout = QVBoxLayout()
        label = QLabel("Settings")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        page.setLayout(layout)
        return page

# Main execution
if __name__ == "__main__":
    app = initialize_app()
    window = MainWindow()
    window.showMaximized()
    app.exec_()

 PATH = r"C:\webdrivers\chromedriver-win64\chromedriver.exe"
 ###############################################
 
 "C:\Users\jayja\OneDrive\Documents\RPA Achievements\Certificates\certificate.pfx"